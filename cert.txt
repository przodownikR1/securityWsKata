keytool -genkey -keyalg RSA -sigalg SHA1withRSA -validity 730 -alias serverKey -keypass przodowniks -storepass slawek_s -keystore serviceKeystore.jks -dname "cn=localhost"
keytool -genkey -keyalg RSA -sigalg SHA1withRSA -validity 730 -alias clientKey  -keypass przodownikc -storepass slawek_c -keystore clientKeystore.jks -dname "cn=clientuser"


two-way ssl 

keytool -export -rfc -keystore clientKeystore.jks -storepass slawek_c -alias clientKey -file client.cer
keytool -import -trustcacerts -keystore serviceKeystore.jks -storepass slawek_s -alias clientkey -file client.cer -noprompt

keytool -export -rfc -keystore serviceKeystore.jks -storepass slawek_s -alias serverkey -file service.cer
keytool -import -trustcacerts -keystore clientKeystore.jks -storepass slawek_c -alias serverkey -file service.cer -noprompt


    Get your client and server certificates, keystore and truststore ready. Make them available in classpath.
    Write a property file to point to keystore and truststore properties (location, password, alias etc) to feed them to WSS4J. These properties are called crypto properties.
    Write a password callback handler class to tell WSS4J about the private key password in the key store.
    Write inbound and outbound interceptor beans. This beans will have a bunch of key value pairs in a map to define the characteristics of the security mechanism.